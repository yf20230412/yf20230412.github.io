# 高效清理旧工作流记录，公开仓库使用
# 无需配置Token
name: Cleanup Old Workflows (Public Repo Optimized)
on:
  schedule:
    - cron: '0 1 */3 * *'  # 每3天凌晨1点运行
  workflow_dispatch:

permissions:
  actions: write  # 仅需删除工作流的权限
  contents: read  # 默认已具备（公开仓库）

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 不需要token参数

      - name: Cleanup in Batches
        uses: actions/github-script@v6
        env:
          RETENTION_DAYS: 1  # 保留最近1天的记录
          BATCH_SIZE: 30     # 每批次处理30条
          MAX_PAGES: 5       # 最多检查5页
        with:
          script: |
            const { RETENTION_DAYS, BATCH_SIZE, MAX_PAGES } = process.env;
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - parseInt(RETENTION_DAYS));

            let deletedCount = 0;
            let skippedCount = 0;
            let protectedCount = 0;
            let errorCount = 0;
            let page = 1;
            
            console.log('🛠️ 开始清理工作流运行记录...');
            console.log(`⏳ 配置参数: 保留天数=${RETENTION_DAYS}, 每批=${BATCH_SIZE}条, 最大页数=${MAX_PAGES}`);

            // 分批清理
            while (page <= parseInt(MAX_PAGES)) {
              console.log(`📖 正在处理第 ${page} 页...`);
              
              try {
                const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: parseInt(BATCH_SIZE),
                  page: page,
                  status: 'completed',
                });

                if (runs.workflow_runs.length === 0) {
                  console.log('⏹️ 没有更多工作流运行记录');
                  break;
                }

                for (const run of runs.workflow_runs) {
                  if (new Date(run.created_at) < cutoffDate) {
                    try {
                      await github.rest.actions.deleteWorkflowRun({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: run.id,
                      });
                      deletedCount++;
                      console.log(`♻️ 已删除 #${run.id} (${run.created_at})`);

                      // 每10条暂停10秒避免限速
                      if (deletedCount % 10 === 0) {
                        await new Promise(resolve => setTimeout(resolve, 10000));
                      }
                    } catch (error) {
                      errorCount++;
                      console.error(`❌ 删除 #${run.id} 失败: ${error.message}`);
                    }
                  } else {
                    skippedCount++;
                    console.log(`⏭️ 跳过 #${run.id} (创建于 ${run.created_at})`);
                  }
                }
              } catch (error) {
                console.error(`⚠️ 获取第 ${page} 页失败: ${error.message}`);
                break;
              }

              page++;
              // 页间暂停10秒
              await new Promise(resolve => setTimeout(resolve, 10000));
            }

            // 结果报告
            console.log('\n📊 清理结果统计:');
            console.log(`✅ 成功删除: ${deletedCount}`);
            console.log(`⏭️ 跳过记录: ${skippedCount}`);
            console.log(`❌ 失败次数: ${errorCount}`);

            // 生成可视化摘要
            try {
              await core.summary
                .addHeading('🧹 工作流清理报告')
                .addTable([
                  ['操作类型', '数量'],
                  ['✅ 成功删除', deletedCount.toString()],
                  ['⏭️ 跳过记录', skippedCount.toString()],
                  ['❌ 失败次数', errorCount.toString()]
                ])
                .addBreak()
                .addRaw(`⏱️ 保留天数: ${RETENTION_DAYS}天 | 执行时间: ${new Date().toLocaleString()}`)
                .write();
              
              console.log('📌 摘要已生成到工作流 Summary 选项卡');
            } catch (summaryError) {
              console.error('⚠️ 生成摘要失败:', summaryError.message);
            }

            // 如有错误则标记失败
            if (errorCount > 0) {
              core.setFailed(`清理完成，但有 ${errorCount} 个错误`);
            } else {
              console.log('🎉 清理任务完成');
            }