import{_ as i,c as l,a4 as n,x as a,M as t,o as h}from"./chunks/framework.C8NEeyPT.js";const f=JSON.parse('{"title":"写在前面","description":"","frontmatter":{},"headers":[],"relativePath":"blog/写在前面.md","filePath":"blog/写在前面.md","lastUpdated":null}'),s={name:"blog/写在前面.md"};function p(d,e,c,b,u,m){const o=t("LastUpdated"),r=t("confetti");return h(),l("div",null,[e[0]||(e[0]=n('<h1 id="写在前面" tabindex="-1">写在前面 <a class="header-anchor" href="#写在前面" aria-label="Permalink to &quot;写在前面&quot;">​</a></h1><h2 id="人会死-但我的博客在github中会万岁" tabindex="-1">人会死，但我的博客在GitHub中会万岁 <a class="header-anchor" href="#人会死-但我的博客在github中会万岁" aria-label="Permalink to &quot;人会死，但我的博客在GitHub中会万岁&quot;">​</a></h2><p>博客是一个分享经验、表达情感的地方，最重要的就是能够随心记录点点滴滴。</p><p>当人类面对时间的无情流逝，我们总是渴望留下一些痕迹，一些思想，一些记忆。博客，作为一种数字化的表达方式，成为了我们记录自己、分享见解、传承知识的平台。然而，时间也在不断地削弱这些数字化的痕迹，让它们逐渐消失在虚拟的海洋中。</p><h2 id="一、博客的起源" tabindex="-1">一、博客的起源 <a class="header-anchor" href="#一、博客的起源" aria-label="Permalink to &quot;一、博客的起源&quot;">​</a></h2><p>我的博客之旅始于多年前的QQ空间。那时，QQ空间也支持一定程度的页面定制化，各种杀马特的装饰与那时流行的非主流个性签名相得益彰，令人惊艳不已。</p><p>然而，随着时间的流逝，我发现原来还有更多的可能性可以探索。拥有自己的域名，搭建一个自由度更高的个人独立博客成为了我的新目标。于是，我开始尝试着使用WordPress、Typecho、Hexo等各种框架。虽然在更换框架时，有一些可以导出导入的功能，但是不可避免地会出现一些文章和图片丢失的情况。</p><p>这个过程不仅是技术上的探索与挑战，更是一个个人成长与思想表达的历程。从QQ空间到拥有自己独立域名的博客，我逐渐意识到，在数字世界中，我们可以拥有更多的自由和创造力，去塑造和展示自己的独特风格和观点。因此，尽管在博客之路上曾经遇到过一些挫折，但每一次的尝试和探索都让我更加坚定了继续前行的决心。</p><h2 id="二、博客的长寿之道" tabindex="-1">二、博客的长寿之道 <a class="header-anchor" href="#二、博客的长寿之道" aria-label="Permalink to &quot;二、博客的长寿之道&quot;">​</a></h2><p>关于选择独立搭建博客还是选择购买个人博客服务的讨论比比皆是。究其根本，如果有免费、稳定的空间搭建独立博客，且安装部署简单、后续维护简洁、使用过程方便，那就不需要购买别人提供的博客服务了。</p><p>随着云服务的普及，搭建一个廉价、甚至是免费的独立博客已经不再是只有“高手”才能玩的了，我们只需要自己动手就能搭建。</p><p>考虑到个人购买服务器并不是长久之计，我转而关注了GitHub Pages。正如《People Die, but Long Live GitHub》这篇文章所述，如果我们希望存储一段信息，让100年后的人也能够轻松访问，应该采取怎样的策略呢？GitHub Pages提供了一个免费、稳定的托管平台，使你的博客与GitHub的存在时间同步。这意味着，无论是作为个人创作的见证，还是作为技术成果的展示，你的博客都能够以一种更加持久的方式存在，并为未来的读者提供信息与启发。因此，将博客托管于GitHub Pages不仅是一种技术选择，更是一种长寿的智慧之举。</p><hr><h2 id="三、关于选型" tabindex="-1">三、关于选型 <a class="header-anchor" href="#三、关于选型" aria-label="Permalink to &quot;三、关于选型&quot;">​</a></h2><p>博客框架在互联网上琳琅满目，有<code>php</code>、<code>java</code>、<code>go</code>、<code>node</code>等各种语言搭的。功能齐全，包括了前端，管理后端。还提供各种精美主题选择。</p><p>相信每个<code>web</code>开发的程序员都曾经搭建过个人博客，然后租个服务器托管，然后写了一两篇文章，阅读量也并不多。渐渐的不再维护，热度逐渐消失，最后服务器到期关站。</p><p>我曾经也是这类人之一，兜兜转转，我倒是觉得写博客还是应该追求极简主义、返璞归真。其实就应该直接用静态站点生成一个项目，找个免费的云端托管。写文章时直接用自己趁手的工具用<code>markdown</code>语法，写完提交代码就完事了，发布也是把打包文件提交就ok了。</p><p>不再去最求那些花里胡哨的主题和框架后，你反而能够安安心心写一些文章了，点滴滴滴也是积累。</p><h2 id="四、关于搭建" tabindex="-1">四、关于搭建 <a class="header-anchor" href="#四、关于搭建" aria-label="Permalink to &quot;四、关于搭建&quot;">​</a></h2><p>本博客就是使用<code>vitepress</code>直接搭建的，搭建过程非常简单，托管服务是使用的<code>vercel</code>免费托管静态站点，想要域名访问就买个便宜域名，解析到vercel就完事了。 不需要托管费用，图床也省了，速度也有保障。</p><h2 id="五、如何搭建" tabindex="-1">五、如何搭建 <a class="header-anchor" href="#五、如何搭建" aria-label="Permalink to &quot;五、如何搭建&quot;">​</a></h2><p>搭建过程会在下一篇详细描述，敬请期待。</p><h2 id="六、参考链接" tabindex="-1">六、参考链接 <a class="header-anchor" href="#六、参考链接" aria-label="Permalink to &quot;六、参考链接&quot;">​</a></h2><p>vitepress官方文档：<a href="https://vitepress.dev/zh/" target="_blank" rel="noreferrer">https://vitepress.dev/zh/</a></p><p>vercel官方网站：<a href="https://vercel.com/home" target="_blank" rel="noreferrer">https://vercel.com/home</a></p><p>基本美化步骤：<a href="https://blog.csdn.net/weixin_44803753/article/details/130903396" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_44803753/article/details/130903396</a></p><p>教你用VitePress搭建博客：<a href="https://xuxing409.github.io/my-blog/technology/article/building-blog-with-vitepress.html" target="_blank" rel="noreferrer">https://xuxing409.github.io/my-blog/technology/article/building-blog-with-vitepress.html</a></p><h2 id="七、博客的未来" tabindex="-1">七、博客的未来 <a class="header-anchor" href="#七、博客的未来" aria-label="Permalink to &quot;七、博客的未来&quot;">​</a></h2><p>虽然没有什么东西是真正永恒的，但我们可以尽力让自己的博客在这个数字时代中存活更久，成为我们留给世界的一份礼物。让我们珍惜这个数字化的痕迹，让它们在 GitHub 中长寿不衰。</p>',29)),a(o),a(r)])}const _=i(s,[["render",p]]);export{f as __pageData,_ as default};
