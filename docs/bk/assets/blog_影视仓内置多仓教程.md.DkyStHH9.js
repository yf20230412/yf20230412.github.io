import{_ as s,c as n,o as e,ai as i}from"./chunks/framework.B5GO0YcD.js";const v=JSON.parse('{"title":"新建 newxd 类名及调用方法说明","description":"","frontmatter":{},"headers":[],"relativePath":"blog/影视仓内置多仓教程.md","filePath":"blog/影视仓内置多仓教程.md","lastUpdated":1748195232000}'),t={name:"blog/影视仓内置多仓教程.md"};function p(l,a,o,c,d,r){return e(),n("div",null,a[0]||(a[0]=[i(`<h1 id="新建-newxd-类名及调用方法说明" tabindex="-1">新建 <code>newxd</code> 类名及调用方法说明 <a class="header-anchor" href="#新建-newxd-类名及调用方法说明" aria-label="Permalink to &quot;新建 \`newxd\` 类名及调用方法说明&quot;">​</a></h1><h2 id="🧩-一、新建-newxd-类名" tabindex="-1">🧩 一、新建 <code>newxd</code> 类名 <a class="header-anchor" href="#🧩-一、新建-newxd-类名" aria-label="Permalink to &quot;🧩 一、新建 \`newxd\` 类名&quot;">​</a></h2><h3 id="搜索与定位" tabindex="-1">搜索与定位 <a class="header-anchor" href="#搜索与定位" aria-label="Permalink to &quot;搜索与定位&quot;">​</a></h3><h4 id="_1-搜索关键词" tabindex="-1">1. <strong>搜索关键词</strong>： <a class="header-anchor" href="#_1-搜索关键词" aria-label="Permalink to &quot;1. **搜索关键词**：&quot;">​</a></h4><ul><li>在代码编辑器中搜索 <code>扫码远程推送</code>。</li><li>搜索类型选择 <code>代码</code>。</li></ul><h4 id="_2-继续查找点击监听器" tabindex="-1">2. <strong>继续查找点击监听器</strong>： <a class="header-anchor" href="#_2-继续查找点击监听器" aria-label="Permalink to &quot;2. **继续查找点击监听器**：&quot;">​</a></h4><ul><li>再次搜索 <code>setOnClickListener</code>。</li><li>选择距离 <code>扫码远程推送</code> 最近的一个匹配项（通常是第三个）。</li></ul><h4 id="_3-跳转到类并复制代码" tabindex="-1">3. <strong>跳转到类并复制代码</strong>： <a class="header-anchor" href="#_3-跳转到类并复制代码" aria-label="Permalink to &quot;3. **跳转到类并复制代码**：&quot;">​</a></h4><ul><li>双击 <code>Lcom/androidx/xd;-&gt;&lt;init&gt;</code> 跳转到 <code>xd</code> 类。</li><li>全选并复制该类代码。</li></ul><h4 id="_4-重命名类" tabindex="-1">4. <strong>重命名类</strong>： <a class="header-anchor" href="#_4-重命名类" aria-label="Permalink to &quot;4. **重命名类**：&quot;">​</a></h4><ul><li>点击页面左上角的 <code>xd</code>。</li><li>点击“定位”。</li><li>长按 <code>xd</code>，选择“添加类名”，输入新类名 <code>newxd</code>。</li><li>进入 <code>newxd</code> 类并粘贴之前复制的代码。</li></ul><hr><h3 id="代码修改与优化" tabindex="-1">代码修改与优化 <a class="header-anchor" href="#代码修改与优化" aria-label="Permalink to &quot;代码修改与优化&quot;">​</a></h3><h4 id="_1-替换类名" tabindex="-1">1. 替换类名 <a class="header-anchor" href="#_1-替换类名" aria-label="Permalink to &quot;1. 替换类名&quot;">​</a></h4><ul><li>将所有 <code>xd</code> 替换为 <code>newxd</code>。</li></ul><h4 id="_2-删除无用代码段" tabindex="-1">2. 删除无用代码段： <a class="header-anchor" href="#_2-删除无用代码段" aria-label="Permalink to &quot;2. 删除无用代码段：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>行号</th><th>原始代码</th></tr></thead><tbody><tr><td>第8行</td><td><code>.implements Landroid/view/View$OnClickListener;</code></td></tr><tr><td>第10行</td><td><code>.field public final synthetic a:I</code></td></tr></tbody></table><h4 id="_3-修改方法名与参数" tabindex="-1">3. 修改方法名与参数： <a class="header-anchor" href="#_3-修改方法名与参数" aria-label="Permalink to &quot;3. 修改方法名与参数：&quot;">​</a></h4><ul><li>原：<code>.method public synthetic constructor &lt;init&gt;(Ljava/lang/Object;I)V</code></li><li>去掉<code>I</code>改为：<code>.method public synthetic constructor &lt;init&gt;(Ljava/lang/Object;)V</code></li></ul><h4 id="_4-删除寄存器参数-i-相关内容" tabindex="-1">4. 删除寄存器参数 <code>I</code> 相关内容 <a class="header-anchor" href="#_4-删除寄存器参数-i-相关内容" aria-label="Permalink to &quot;4. 删除寄存器参数 \`I\` 相关内容&quot;">​</a></h4><ul><li>删除第22行：<code>iput p2, p0, Lcom/androidx/newxd;-&gt;a:I</code></li></ul><h4 id="_5-修改-onclick-方法为-autoupdate-并去掉括号内所有内容" tabindex="-1">5. 修改 <code>onClick</code> 方法为 <code>autoupdate()</code>并去掉括号内所有内容： <a class="header-anchor" href="#_5-修改-onclick-方法为-autoupdate-并去掉括号内所有内容" aria-label="Permalink to &quot;5. 修改 \`onClick\` 方法为 \`autoupdate()\`并去掉括号内所有内容：&quot;">​</a></h4><ul><li>原：<code>.method public final onClick(Landroid/view/View;)V</code></li><li>改为：<code>.method public final autoupdate()V</code></li></ul><h4 id="_6-删除以下内容" tabindex="-1">6. 删除以下内容： <a class="header-anchor" href="#_6-删除以下内容" aria-label="Permalink to &quot;6. 删除以下内容：&quot;">​</a></h4><ul><li><p>删除 <code>const-string v3, &quot;this$0&quot;</code> 及其上方所有代码。</p></li><li><p>删除 <code>packed-switch v0, :pswitch_data_11a</code> 区域。</p></li><li><p>保留 <code>iget-object v4, p0, Lcom/androidx/xd;-&gt;b:Ljava/lang/Object;</code></p></li><li><p>删除从 <code>check-cast v4, Lcom/github/tvbox/osc/ui/view/PlayerMoreFucPop;</code> 到第一个 <code>new-instance v1, Lcom/androidx/ek0;</code> <strong>中间</strong>的所有代码。</p></li><li><p>删除 <code>:goto_8c</code> 标签及其后的内容，保留 <code>return-void</code>。</p></li><li><p>紧接着删除 <code>return-void</code>后面一直到最后面<code>.end method</code> <strong>中间</strong>全部代码</p></li></ul><h4 id="_7-替换-check-cast-中的目标类" tabindex="-1">7. 替换 <code>check-cast</code> 中的目标类 <a class="header-anchor" href="#_7-替换-check-cast-中的目标类" aria-label="Permalink to &quot;7. 替换 \`check-cast\` 中的目标类&quot;">​</a></h4><ul><li>根据最后面倒数第三行<code>handleRemotePush</code>中的<code> Lcom/androidx/tt0</code>;</li></ul><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>invoke-virtual {v4, v1}, Lcom/androidx/tt0;-&gt;handleRemotePush(Lcom/androidx/ek0;)V &quot;</span></span></code></pre></div><p>将 <code>check-cast v4, Lcom/github/tvbox/osc/ui/view/PlayerMoreFucPop;</code> 替换为：</p><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>check-cast v4, Lcom/androidx/tt0;</span></span></code></pre></div><hr><h3 id="_8-添加自定义接口逻辑" tabindex="-1">8. 添加自定义接口逻辑 <a class="header-anchor" href="#_8-添加自定义接口逻辑" aria-label="Permalink to &quot;8. 添加自定义接口逻辑&quot;">​</a></h3><p>在 <code>.method public final autoupdate()V</code> 下方添加如下代码：</p><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    const-string/jumbo v3, &quot;接口名称&quot;</span></span>
<span class="line"><span>    const-string v5, &quot;此处填入多仓接口URL链接&quot;</span></span></code></pre></div><p>更改下面<code>v0</code>和<code>p1</code> 寄存器和上面的<code>v3</code>和<code>v5</code>一一对应，更改后的效果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    invoke-virtual {v2, v3}, Lcom/github/tvbox/osc/bean/MoreSourceBean;-&gt;setSourceName(Ljava/lang/String;)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 133</span></span>
<span class="line"><span>    invoke-virtual {v2, v5}, Lcom/github/tvbox/osc/bean/MoreSourceBean;-&gt;setSourceUrl(Ljava/lang/String;)V</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">⚠️注意事项</p><p><code>v3</code>和<code>v5</code> 可以随意改动，但不能用已经被使用过的寄存器，所以需要点击上面的<code>铅笔</code>图标，点击<code>寄存器分析</code>，查看所有可用的寄存器。根据当前方法使用的寄存器情况，选择未被占用的寄存器（如 <code>v3</code> 和 <code>v5</code>），必要时可调整 <code>.registers</code> 数量。</p></div><p>最后点击<code>转成Java</code>查看是否报错，如有错误请修正后重新加载。</p><p>💡 <strong>新建 <code>newxd</code> 类完成</strong></p><h2 id="✂️-二、调用-newxd-类的方法" tabindex="-1">✂️ 二、调用 <code>newxd</code> 类的方法 <a class="header-anchor" href="#✂️-二、调用-newxd-类的方法" aria-label="Permalink to &quot;✂️ 二、调用 \`newxd\` 类的方法&quot;">​</a></h2><hr><h3 id="✅-方法一-通过-homeactivity-调用" tabindex="-1">✅ 方法一：通过 <code>HomeActivity</code> 调用 <a class="header-anchor" href="#✅-方法一-通过-homeactivity-调用" aria-label="Permalink to &quot;✅ 方法一：通过 \`HomeActivity\` 调用&quot;">​</a></h3><h4 id="步骤" tabindex="-1">步骤： <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤：&quot;">​</a></h4><ol><li>在 <strong>classes</strong> 文件中搜索 <code>HomeActivity</code>。</li><li>导航至 <code>init()V</code> 方法（通常位于 <code>finish()V</code> 和 <code>onBackPressed()V</code> 之间）。</li><li>在 <code>init()</code> 方法前插入 <strong>代码①</strong>，在方法体内插入 <strong>代码②</strong>，效果如下所示：</li></ol><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>在此处插入代码①</span></span>
<span class="line"><span>.method public final init()V</span></span>
<span class="line"><span>    .registers 11</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    在此处插入代码②</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 1</span></span>
<span class="line"><span>    invoke-static {}, Lcom/androidx/jj;-&gt;u()Lcom/androidx/jj;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 4</span></span>
<span class="line"><span>    move-result-object v0</span></span></code></pre></div><h4 id="🌺代码1-新增方法-checkcspjarfileexistence" tabindex="-1">🌺代码①：新增方法 <code>checkCSPJarFileExistence</code> <a class="header-anchor" href="#🌺代码1-新增方法-checkcspjarfileexistence" aria-label="Permalink to &quot;🌺代码①：新增方法 \`checkCSPJarFileExistence\`&quot;">​</a></h4><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.method private checkCSPJarFileExistence()V</span></span>
<span class="line"><span>    .registers 5</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    invoke-virtual {p0}, Lcom/github/tvbox/osc/ui/activity/HomeActivity;-&gt;getFilesDir()Ljava/io/File;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    move-result-object v0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    new-instance v1, Ljava/io/File;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    const-string v2, &quot;csp.jar&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    invoke-direct {v1, v0, v2}, Ljava/io/File;-&gt;&lt;init&gt;(Ljava/io/File;Ljava/lang/String;)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    invoke-virtual {v1}, Ljava/io/File;-&gt;exists()Z</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    move-result v3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if-nez v3, :cond_1e</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    new-instance v0, Lcom/androidx/tt0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    invoke-direct {v0, p0}, Lcom/androidx/tt0;-&gt;&lt;init&gt;(Landroid/app/Activity;)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    new-instance v1, Lcom/androidx/newxd;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    invoke-direct {v1, v0}, Lcom/androidx/newxd;-&gt;&lt;init&gt;(Ljava/lang/Object;)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    invoke-virtual {v1}, Lcom/androidx/newxd;-&gt;autoupdate()V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    :cond_1e</span></span>
<span class="line"><span>    return-void</span></span>
<span class="line"><span>.end method</span></span></code></pre></div><h4 id="🌺代码2-在-init-方法内调用" tabindex="-1">🌺代码②：在 <code>init()</code> 方法内调用 <a class="header-anchor" href="#🌺代码2-在-init-方法内调用" aria-label="Permalink to &quot;🌺代码②：在 \`init()\` 方法内调用&quot;">​</a></h4><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>invoke-direct {p0}, Lcom/github/tvbox/osc/ui/activity/HomeActivity;-&gt;checkCSPJarFileExistence()V</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">⚠️注意事项：</p><p>替换&quot;tt0&quot;和&quot;newxd&quot;，检查&quot;autoupdate&quot;方法名和新建的&quot;newxd&quot;类名中的&quot;autoupdate&quot;是否一致。</p></div><hr><h3 id="✅-方法二-通过-baseactivity-调用" tabindex="-1">✅ 方法二：通过 <code>BaseActivity</code> 调用 <a class="header-anchor" href="#✅-方法二-通过-baseactivity-调用" aria-label="Permalink to &quot;✅ 方法二：通过 \`BaseActivity\` 调用&quot;">​</a></h3><h4 id="步骤-1" tabindex="-1">步骤： <a class="header-anchor" href="#步骤-1" aria-label="Permalink to &quot;步骤：&quot;">​</a></h4><ol><li>根据&quot;newxd&quot;类名中的<code>tt0</code>，搜索 <code>tt0</code> 类名。</li><li>转成 Java 查找 <code>扫码远程推送</code> 关键词，找到 <code>setAdapter</code> 相关代码。</li><li>复制以下两段代码：</li></ol><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>new-instance p1, Lcom/androidx/xd;</span></span></code></pre></div><p>和</p><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>invoke-direct {p1, p0, v3}, Lcom/androidx/xd;-&gt;&lt;init&gt;(Ljava/lang/Object;I)V</span></span></code></pre></div><p>得到 <code>代码②</code></p><p>原代码：</p><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    nvoke-virtual {p1, v3}, Lcom/owen/tvrecyclerview/widget/TvRecyclerView;-&gt;setAdapter(Landroidx/recyclerview/widget/RecyclerView$Adapter;)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 269</span></span>
<span class="line"><span>    :goto_10c</span></span>
<span class="line"><span>    if-eqz v1, :cond_117</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 271</span></span>
<span class="line"><span>    new-instance p1, Lcom/androidx/xd;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 273</span></span>
<span class="line"><span>    const/4 v3, 0x3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 274</span></span>
<span class="line"><span>    invoke-direct {p1, p0, v3}, Lcom/androidx/xd;-&gt;&lt;init&gt;(Ljava/lang/Object;I)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 277</span></span>
<span class="line"><span>    invoke-virtual {v1, p1}, Landroid/view/View;-&gt;setOnClickListener(Landroid/view/View$OnClickListener;)V</span></span></code></pre></div><ol start="4"><li>点击导航栏的<code>init</code>长按查看调用处，在当前结果中搜索<code>getTopActivity(...)</code>：</li></ol><p>复制上面的代码</p><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>new-instance p1, Lcom/androidx/tt0;</span></span></code></pre></div><p>和下面的代码</p><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>invoke-direct {p1, v0}, Lcom/androidx/tt0;-&gt;&lt;init&gt;(Landroid/app/Activity;)V</span></span></code></pre></div><p>得到 <code>代码①</code> 原代码如下：</p><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    if-nez v0, :cond_97</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 134</span></span>
<span class="line"><span>    :cond_85</span></span>
<span class="line"><span>    new-instance p1, Lcom/androidx/tt0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 136</span></span>
<span class="line"><span>    invoke-static {}, Lcom/blankj/utilcode/util/b;-&gt;b()Landroid/app/Activity;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 139</span></span>
<span class="line"><span>    move-result-object v0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 140</span></span>
<span class="line"><span>    const-string v1, &quot;getTopActivity(...)&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 142</span></span>
<span class="line"><span>    invoke-static {v0, v1}, Lcom/androidx/xx;-&gt;g(Ljava/lang/Object;Ljava/lang/String;)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 145</span></span>
<span class="line"><span>    invoke-direct {p1, v0}, Lcom/androidx/tt0;-&gt;&lt;init&gt;(Landroid/app/Activity;)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 148</span></span>
<span class="line"><span>    invoke-virtual {p1}, Lcom/androidx/tt0;-&gt;show()V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .line 151</span></span>
<span class="line"><span>    return-void</span></span></code></pre></div><ol start="5"><li>返回 <code>newxd</code> 类，导航中长按 <code>autoupdate</code>，复制 <code>复制invoke代码</code> 得到如下代码：</li></ol><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>invoke-virtual {v0}, Lcom/androidx/newxd;-&gt;autoupdate()V</span></span></code></pre></div><ol start="6"><li>搜索 <code>BaseActivity</code>，进入 <code>onCreate</code> 方法，在其中插入以下代码（顺序：② → ① → ③）：</li></ol><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>new-instance p1, Lcom/androidx/tt0;</span></span>
<span class="line"><span>invoke-direct {p1, v0}, Lcom/androidx/tt0;-&gt;&lt;init&gt;(Landroid/app/Activity;)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>new-instance p1, Lcom/androidx/xd;</span></span>
<span class="line"><span>invoke-direct {p1, p0, v3}, Lcom/androidx/xd;-&gt;&lt;init&gt;(Ljava/lang/Object;I)V</span></span>
<span class="line"><span></span></span>
<span class="line"><span>invoke-virtual {v0}, Lcom/androidx/newxd;-&gt;autoupdate()V</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">注意事项</p><p>更改代码: <code>tt0</code> 和 <code>xd</code>还有<code>寄存器</code>以及<code>(Ljava/lang/Object;I)</code>里面的 <code>I</code>，寄存器只能用v0、v1、p0替换。</p></div><p>更改后代码如下：</p><div class="language-smali vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">smali</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    new-instance v0, Lcom/androidx/tt0;</span></span>
<span class="line"><span>    invoke-direct {v0, p0}, Lcom/androidx/tt0;-&gt;&lt;init&gt;(Landroid/app/Activity;)V</span></span>
<span class="line"><span>    new-instance v1, Lcom/androidx/newxd;</span></span>
<span class="line"><span>    invoke-direct {v1, v0}, Lcom/androidx/newxd;-&gt;&lt;init&gt;(Ljava/lang/Object;)V</span></span>
<span class="line"><span>    invoke-virtual {v0}, Lcom/androidx/newxd;-&gt;autoupdate()V</span></span></code></pre></div><p>转成java代码查看<code>onCreate</code>代码最终效果应为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newxd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tt0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autoupdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><strong>📌 以上是通过<code>HomeActivity</code>和<code>BaseActivity</code>调用&quot;newxd&quot;的两种方法。</strong></p>`,77)]))}const u=s(t,[["render",p]]);export{v as __pageData,u as default};
